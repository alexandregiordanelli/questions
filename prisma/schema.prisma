generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Notebook {
    id          Int        @id @default(autoincrement())
    customerId  Int
    tag         String
    description String?
    topics      Topic[]
    price       Float?
    name        String?
    questions   Question[]
    customer    Customer   @relation(fields: [customerId], references: [id])
    @@unique([customerId, tag])
}

model Topic {
    id         Int        @id @default(autoincrement())
    notebookId Int
    name       String
    subtopics  SubTopic[]
    notebook   Notebook   @relation(fields: [notebookId], references: [id])
}

model SubTopic {
    id        Int        @id @default(autoincrement())
    topicId   Int
    name      String?
    questions Question[]
    topic     Topic      @relation(fields: [topicId], references: [id])
}

model Question {
    id               Int               @id @default(autoincrement())
    tag              String
    question         String
    notebookId       Int
    solution         String?
    alternatives     Alternative[]
    rightAlternative RightAlternative?
    title            String?
    subTopicId       Int?
    subTopic         SubTopic?         @relation(fields: [subTopicId], references: [id])
    notebook         Notebook          @relation(fields: [notebookId], references: [id])

    @@unique([notebookId, tag])
}

model Alternative {
    id               Int                @id @default(autoincrement())
    alternative      String
    questionId       Int
    question         Question           @relation(fields: [questionId], references: [id])
    RightAlternative RightAlternative[]
}

model RightAlternative {
    id            Int         @id @default(autoincrement())
    alternativeId Int         @unique
    questionId    Int         @unique
    question      Question    @relation(fields: [questionId], references: [id])
    alternative   Alternative @relation(fields: [alternativeId], references: [id])
}

model Account {
    id                 Int       @id @default(autoincrement())
    compoundId         String    @unique @map(name: "compound_id")
    userId             Int       @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @map(name: "updated_at")


    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")
    @@map(name: "accounts")
}

model Session {
    id           Int      @id @default(autoincrement())
    userId       Int      @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @map(name: "updated_at")

    @@map(name: "sessions")
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map(name: "email_verified")
    image         String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @map(name: "updated_at")

    @@map(name: "users")
}

model VerificationRequest {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @default(now()) @map(name: "updated_at")

    @@map(name: "verification_requests")
}

model Customer {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  username    String     @unique
  user        User       @relation(fields: [userId], references: [id])
  notebooks   Notebook[] 
}