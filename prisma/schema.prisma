generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["groupBy", "orderByRelation"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 Int                 @id @default(autoincrement())
  userId             String              @unique
  name               String              @default("")
  tag                String              @unique
  createdAt          DateTime?           @default(now())
  updatedAt          DateTime?           @updatedAt
  mediaId            Int?
  text               String              @db.Text
  media              Media?              @relation(fields: [mediaId], references: [id])
  chosenAlternatives ChosenAlternative[]
  medias             Media[]             @relation("medias")
  notebooks          Notebook[]
  subscribers        Subscriber[]
}

model Notebook {
  id                  Int       @id @default(autoincrement())
  customerId         Int
  tag                String     @unique
  mediaId            Int?
  text               String?    @db.Text
  price              Float?
  name               String
  createdAt          DateTime?  @default(now())
  updatedAt          DateTime?  @updatedAt
  customer           Customer   @relation(fields: [customerId], references: [id])
  media              Media?     @relation(fields: [mediaId], references: [id])
  questions          Question[]
  topics             Topic[]
  subscribers        Subscriber[]
}

model Topic {
  id         Int        @id @default(autoincrement())
  notebookId Int
  name       String
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt
  order      Int
  notebook   Notebook   @relation(fields: [notebookId], references: [id])
  subtopics  SubTopic[]
}

model SubTopic {
  id        Int        @id @default(autoincrement())
  topicId   Int
  name      String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  order     Int
  topic     Topic      @relation(fields: [topicId], references: [id])
  questions Question[]
}

model Question {
  id                 Int                 @id @default(autoincrement())
  tag                String
  text               String              @db.Text
  notebookId         Int
  solution           String?             @db.Text
  name               String?
  subTopicId         Int?
  createdAt          DateTime?           @default(now())
  updatedAt          DateTime?           @updatedAt
  order              Int
  notebook           Notebook            @relation(fields: [notebookId], references: [id])
  subTopic           SubTopic?           @relation(fields: [subTopicId], references: [id])
  alternatives       Alternative[]
  chosenAlternatives ChosenAlternative[]
  rightAlternative   RightAlternative?

  @@unique([notebookId, tag])
}

model Alternative {
  id                 Int                 @id @default(autoincrement())
  text               String              @db.Text
  questionId         Int
  createdAt          DateTime?           @default(now())
  updatedAt          DateTime?           @updatedAt
  question           Question            @relation(fields: [questionId], references: [id])
  chosenAlternatives ChosenAlternative[]
  rightAlternative   RightAlternative?

}

model RightAlternative {
  id            Int         @id @default(autoincrement())
  alternativeId Int         @unique
  questionId    Int         @unique
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  question      Question    @relation(fields: [questionId], references: [id])
}

model ChosenAlternative {
  id            Int         @id @default(autoincrement())
  customerId    Int
  alternativeId Int
  questionId    Int
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  customer      Customer    @relation(fields: [customerId], references: [id])
  question      Question    @relation(fields: [questionId], references: [id])

  @@unique([customerId, questionId])
}

model Subscriber {
  id            Int         @id @default(autoincrement())
  customerId    Int
  notebookId    Int
  customer      Customer    @relation(fields: [customerId], references: [id])
  notebook      Notebook    @relation(fields: [notebookId], references: [id])

  @@unique([customerId, notebookId])
}

model Media {
  id         Int        @id @default(autoincrement())
  customerId Int
  tag        String
  name       String
  ext        String
  mime       String
  size       Float
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt
  text       String?
  caption    String?
  width      Int?
  height     Int?
  customer   Customer   @relation("medias", fields: [customerId], references: [id])
  customers  Customer[]
  notebooks  Notebook[]

  @@unique([customerId, tag])
}
