/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown
      }
    }
  }
  '/Alternative': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Alternative.id']
          text?: parameters['rowFilter.Alternative.text']
          questionId?: parameters['rowFilter.Alternative.questionId']
          createdAt?: parameters['rowFilter.Alternative.createdAt']
          updatedAt?: parameters['rowFilter.Alternative.updatedAt']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['Alternative'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** Alternative */
          Alternative?: definitions['Alternative']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Alternative.id']
          text?: parameters['rowFilter.Alternative.text']
          questionId?: parameters['rowFilter.Alternative.questionId']
          createdAt?: parameters['rowFilter.Alternative.createdAt']
          updatedAt?: parameters['rowFilter.Alternative.updatedAt']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Alternative.id']
          text?: parameters['rowFilter.Alternative.text']
          questionId?: parameters['rowFilter.Alternative.questionId']
          createdAt?: parameters['rowFilter.Alternative.createdAt']
          updatedAt?: parameters['rowFilter.Alternative.updatedAt']
        }
        body: {
          /** Alternative */
          Alternative?: definitions['Alternative']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/ChosenAlternative': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.ChosenAlternative.id']
          customerId?: parameters['rowFilter.ChosenAlternative.customerId']
          alternativeId?: parameters['rowFilter.ChosenAlternative.alternativeId']
          questionId?: parameters['rowFilter.ChosenAlternative.questionId']
          createdAt?: parameters['rowFilter.ChosenAlternative.createdAt']
          updatedAt?: parameters['rowFilter.ChosenAlternative.updatedAt']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['ChosenAlternative'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** ChosenAlternative */
          ChosenAlternative?: definitions['ChosenAlternative']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.ChosenAlternative.id']
          customerId?: parameters['rowFilter.ChosenAlternative.customerId']
          alternativeId?: parameters['rowFilter.ChosenAlternative.alternativeId']
          questionId?: parameters['rowFilter.ChosenAlternative.questionId']
          createdAt?: parameters['rowFilter.ChosenAlternative.createdAt']
          updatedAt?: parameters['rowFilter.ChosenAlternative.updatedAt']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.ChosenAlternative.id']
          customerId?: parameters['rowFilter.ChosenAlternative.customerId']
          alternativeId?: parameters['rowFilter.ChosenAlternative.alternativeId']
          questionId?: parameters['rowFilter.ChosenAlternative.questionId']
          createdAt?: parameters['rowFilter.ChosenAlternative.createdAt']
          updatedAt?: parameters['rowFilter.ChosenAlternative.updatedAt']
        }
        body: {
          /** ChosenAlternative */
          ChosenAlternative?: definitions['ChosenAlternative']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/Customer': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Customer.id']
          userId?: parameters['rowFilter.Customer.userId']
          name?: parameters['rowFilter.Customer.name']
          tag?: parameters['rowFilter.Customer.tag']
          createdAt?: parameters['rowFilter.Customer.createdAt']
          updatedAt?: parameters['rowFilter.Customer.updatedAt']
          mediaId?: parameters['rowFilter.Customer.mediaId']
          text?: parameters['rowFilter.Customer.text']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['Customer'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** Customer */
          Customer?: definitions['Customer']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Customer.id']
          userId?: parameters['rowFilter.Customer.userId']
          name?: parameters['rowFilter.Customer.name']
          tag?: parameters['rowFilter.Customer.tag']
          createdAt?: parameters['rowFilter.Customer.createdAt']
          updatedAt?: parameters['rowFilter.Customer.updatedAt']
          mediaId?: parameters['rowFilter.Customer.mediaId']
          text?: parameters['rowFilter.Customer.text']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Customer.id']
          userId?: parameters['rowFilter.Customer.userId']
          name?: parameters['rowFilter.Customer.name']
          tag?: parameters['rowFilter.Customer.tag']
          createdAt?: parameters['rowFilter.Customer.createdAt']
          updatedAt?: parameters['rowFilter.Customer.updatedAt']
          mediaId?: parameters['rowFilter.Customer.mediaId']
          text?: parameters['rowFilter.Customer.text']
        }
        body: {
          /** Customer */
          Customer?: definitions['Customer']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/Media': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Media.id']
          customerId?: parameters['rowFilter.Media.customerId']
          tag?: parameters['rowFilter.Media.tag']
          name?: parameters['rowFilter.Media.name']
          ext?: parameters['rowFilter.Media.ext']
          mime?: parameters['rowFilter.Media.mime']
          size?: parameters['rowFilter.Media.size']
          createdAt?: parameters['rowFilter.Media.createdAt']
          updatedAt?: parameters['rowFilter.Media.updatedAt']
          text?: parameters['rowFilter.Media.text']
          caption?: parameters['rowFilter.Media.caption']
          width?: parameters['rowFilter.Media.width']
          height?: parameters['rowFilter.Media.height']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['Media'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** Media */
          Media?: definitions['Media']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Media.id']
          customerId?: parameters['rowFilter.Media.customerId']
          tag?: parameters['rowFilter.Media.tag']
          name?: parameters['rowFilter.Media.name']
          ext?: parameters['rowFilter.Media.ext']
          mime?: parameters['rowFilter.Media.mime']
          size?: parameters['rowFilter.Media.size']
          createdAt?: parameters['rowFilter.Media.createdAt']
          updatedAt?: parameters['rowFilter.Media.updatedAt']
          text?: parameters['rowFilter.Media.text']
          caption?: parameters['rowFilter.Media.caption']
          width?: parameters['rowFilter.Media.width']
          height?: parameters['rowFilter.Media.height']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Media.id']
          customerId?: parameters['rowFilter.Media.customerId']
          tag?: parameters['rowFilter.Media.tag']
          name?: parameters['rowFilter.Media.name']
          ext?: parameters['rowFilter.Media.ext']
          mime?: parameters['rowFilter.Media.mime']
          size?: parameters['rowFilter.Media.size']
          createdAt?: parameters['rowFilter.Media.createdAt']
          updatedAt?: parameters['rowFilter.Media.updatedAt']
          text?: parameters['rowFilter.Media.text']
          caption?: parameters['rowFilter.Media.caption']
          width?: parameters['rowFilter.Media.width']
          height?: parameters['rowFilter.Media.height']
        }
        body: {
          /** Media */
          Media?: definitions['Media']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/Notebook': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Notebook.id']
          customerId?: parameters['rowFilter.Notebook.customerId']
          tag?: parameters['rowFilter.Notebook.tag']
          mediaId?: parameters['rowFilter.Notebook.mediaId']
          text?: parameters['rowFilter.Notebook.text']
          price?: parameters['rowFilter.Notebook.price']
          name?: parameters['rowFilter.Notebook.name']
          createdAt?: parameters['rowFilter.Notebook.createdAt']
          updatedAt?: parameters['rowFilter.Notebook.updatedAt']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['Notebook'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** Notebook */
          Notebook?: definitions['Notebook']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Notebook.id']
          customerId?: parameters['rowFilter.Notebook.customerId']
          tag?: parameters['rowFilter.Notebook.tag']
          mediaId?: parameters['rowFilter.Notebook.mediaId']
          text?: parameters['rowFilter.Notebook.text']
          price?: parameters['rowFilter.Notebook.price']
          name?: parameters['rowFilter.Notebook.name']
          createdAt?: parameters['rowFilter.Notebook.createdAt']
          updatedAt?: parameters['rowFilter.Notebook.updatedAt']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Notebook.id']
          customerId?: parameters['rowFilter.Notebook.customerId']
          tag?: parameters['rowFilter.Notebook.tag']
          mediaId?: parameters['rowFilter.Notebook.mediaId']
          text?: parameters['rowFilter.Notebook.text']
          price?: parameters['rowFilter.Notebook.price']
          name?: parameters['rowFilter.Notebook.name']
          createdAt?: parameters['rowFilter.Notebook.createdAt']
          updatedAt?: parameters['rowFilter.Notebook.updatedAt']
        }
        body: {
          /** Notebook */
          Notebook?: definitions['Notebook']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/Question': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Question.id']
          tag?: parameters['rowFilter.Question.tag']
          text?: parameters['rowFilter.Question.text']
          name?: parameters['rowFilter.Question.name']
          createdAt?: parameters['rowFilter.Question.createdAt']
          updatedAt?: parameters['rowFilter.Question.updatedAt']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['Question'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** Question */
          Question?: definitions['Question']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Question.id']
          tag?: parameters['rowFilter.Question.tag']
          text?: parameters['rowFilter.Question.text']
          name?: parameters['rowFilter.Question.name']
          createdAt?: parameters['rowFilter.Question.createdAt']
          updatedAt?: parameters['rowFilter.Question.updatedAt']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Question.id']
          tag?: parameters['rowFilter.Question.tag']
          text?: parameters['rowFilter.Question.text']
          name?: parameters['rowFilter.Question.name']
          createdAt?: parameters['rowFilter.Question.createdAt']
          updatedAt?: parameters['rowFilter.Question.updatedAt']
        }
        body: {
          /** Question */
          Question?: definitions['Question']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/QuestionSubTopic': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.QuestionSubTopic.id']
          questionId?: parameters['rowFilter.QuestionSubTopic.questionId']
          subTopicId?: parameters['rowFilter.QuestionSubTopic.subTopicId']
          createdAt?: parameters['rowFilter.QuestionSubTopic.createdAt']
          updatedAt?: parameters['rowFilter.QuestionSubTopic.updatedAt']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['QuestionSubTopic'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** QuestionSubTopic */
          QuestionSubTopic?: definitions['QuestionSubTopic']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.QuestionSubTopic.id']
          questionId?: parameters['rowFilter.QuestionSubTopic.questionId']
          subTopicId?: parameters['rowFilter.QuestionSubTopic.subTopicId']
          createdAt?: parameters['rowFilter.QuestionSubTopic.createdAt']
          updatedAt?: parameters['rowFilter.QuestionSubTopic.updatedAt']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.QuestionSubTopic.id']
          questionId?: parameters['rowFilter.QuestionSubTopic.questionId']
          subTopicId?: parameters['rowFilter.QuestionSubTopic.subTopicId']
          createdAt?: parameters['rowFilter.QuestionSubTopic.createdAt']
          updatedAt?: parameters['rowFilter.QuestionSubTopic.updatedAt']
        }
        body: {
          /** QuestionSubTopic */
          QuestionSubTopic?: definitions['QuestionSubTopic']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/RightAlternative': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.RightAlternative.id']
          alternativeId?: parameters['rowFilter.RightAlternative.alternativeId']
          questionId?: parameters['rowFilter.RightAlternative.questionId']
          createdAt?: parameters['rowFilter.RightAlternative.createdAt']
          updatedAt?: parameters['rowFilter.RightAlternative.updatedAt']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['RightAlternative'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** RightAlternative */
          RightAlternative?: definitions['RightAlternative']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.RightAlternative.id']
          alternativeId?: parameters['rowFilter.RightAlternative.alternativeId']
          questionId?: parameters['rowFilter.RightAlternative.questionId']
          createdAt?: parameters['rowFilter.RightAlternative.createdAt']
          updatedAt?: parameters['rowFilter.RightAlternative.updatedAt']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.RightAlternative.id']
          alternativeId?: parameters['rowFilter.RightAlternative.alternativeId']
          questionId?: parameters['rowFilter.RightAlternative.questionId']
          createdAt?: parameters['rowFilter.RightAlternative.createdAt']
          updatedAt?: parameters['rowFilter.RightAlternative.updatedAt']
        }
        body: {
          /** RightAlternative */
          RightAlternative?: definitions['RightAlternative']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/Solution': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Solution.id']
          questionId?: parameters['rowFilter.Solution.questionId']
          customerId?: parameters['rowFilter.Solution.customerId']
          text?: parameters['rowFilter.Solution.text']
          createdAt?: parameters['rowFilter.Solution.createdAt']
          updatedAt?: parameters['rowFilter.Solution.updatedAt']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['Solution'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** Solution */
          Solution?: definitions['Solution']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Solution.id']
          questionId?: parameters['rowFilter.Solution.questionId']
          customerId?: parameters['rowFilter.Solution.customerId']
          text?: parameters['rowFilter.Solution.text']
          createdAt?: parameters['rowFilter.Solution.createdAt']
          updatedAt?: parameters['rowFilter.Solution.updatedAt']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Solution.id']
          questionId?: parameters['rowFilter.Solution.questionId']
          customerId?: parameters['rowFilter.Solution.customerId']
          text?: parameters['rowFilter.Solution.text']
          createdAt?: parameters['rowFilter.Solution.createdAt']
          updatedAt?: parameters['rowFilter.Solution.updatedAt']
        }
        body: {
          /** Solution */
          Solution?: definitions['Solution']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/SubTopic': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.SubTopic.id']
          topicId?: parameters['rowFilter.SubTopic.topicId']
          name?: parameters['rowFilter.SubTopic.name']
          createdAt?: parameters['rowFilter.SubTopic.createdAt']
          updatedAt?: parameters['rowFilter.SubTopic.updatedAt']
          /** Ordering */
          order?: parameters['order']
          /** Filtering Columns */
          select?: parameters['select']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['SubTopic'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** SubTopic */
          SubTopic?: definitions['SubTopic']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.SubTopic.id']
          topicId?: parameters['rowFilter.SubTopic.topicId']
          name?: parameters['rowFilter.SubTopic.name']
          createdAt?: parameters['rowFilter.SubTopic.createdAt']
          updatedAt?: parameters['rowFilter.SubTopic.updatedAt']
          order?: parameters['rowFilter.SubTopic.order']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.SubTopic.id']
          topicId?: parameters['rowFilter.SubTopic.topicId']
          name?: parameters['rowFilter.SubTopic.name']
          createdAt?: parameters['rowFilter.SubTopic.createdAt']
          updatedAt?: parameters['rowFilter.SubTopic.updatedAt']
          order?: parameters['rowFilter.SubTopic.order']
        }
        body: {
          /** SubTopic */
          SubTopic?: definitions['SubTopic']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/Subscriber': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Subscriber.id']
          customerId?: parameters['rowFilter.Subscriber.customerId']
          notebookId?: parameters['rowFilter.Subscriber.notebookId']
          createdAt?: parameters['rowFilter.Subscriber.createdAt']
          updatedAt?: parameters['rowFilter.Subscriber.updatedAt']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['Subscriber'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** Subscriber */
          Subscriber?: definitions['Subscriber']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Subscriber.id']
          customerId?: parameters['rowFilter.Subscriber.customerId']
          notebookId?: parameters['rowFilter.Subscriber.notebookId']
          createdAt?: parameters['rowFilter.Subscriber.createdAt']
          updatedAt?: parameters['rowFilter.Subscriber.updatedAt']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Subscriber.id']
          customerId?: parameters['rowFilter.Subscriber.customerId']
          notebookId?: parameters['rowFilter.Subscriber.notebookId']
          createdAt?: parameters['rowFilter.Subscriber.createdAt']
          updatedAt?: parameters['rowFilter.Subscriber.updatedAt']
        }
        body: {
          /** Subscriber */
          Subscriber?: definitions['Subscriber']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/Topic': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Topic.id']
          notebookId?: parameters['rowFilter.Topic.notebookId']
          name?: parameters['rowFilter.Topic.name']
          createdAt?: parameters['rowFilter.Topic.createdAt']
          updatedAt?: parameters['rowFilter.Topic.updatedAt']
          /** Ordering */
          order?: parameters['order']
          /** Filtering Columns */
          select?: parameters['select']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['Topic'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** Topic */
          Topic?: definitions['Topic']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Topic.id']
          notebookId?: parameters['rowFilter.Topic.notebookId']
          name?: parameters['rowFilter.Topic.name']
          createdAt?: parameters['rowFilter.Topic.createdAt']
          updatedAt?: parameters['rowFilter.Topic.updatedAt']
          order?: parameters['rowFilter.Topic.order']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Topic.id']
          notebookId?: parameters['rowFilter.Topic.notebookId']
          name?: parameters['rowFilter.Topic.name']
          createdAt?: parameters['rowFilter.Topic.createdAt']
          updatedAt?: parameters['rowFilter.Topic.updatedAt']
          order?: parameters['rowFilter.Topic.order']
        }
        body: {
          /** Topic */
          Topic?: definitions['Topic']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
}

export interface definitions {
  Alternative: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    text: string
    /**
     * Note:
     * This is a Foreign Key to `Question.id`.<fk table='Question' column='id'/>
     */
    questionId: number
    createdAt?: string
    updatedAt?: string
  }
  ChosenAlternative: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Note:
     * This is a Foreign Key to `Customer.id`.<fk table='Customer' column='id'/>
     */
    customerId: number
    /**
     * Note:
     * This is a Foreign Key to `Alternative.id`.<fk table='Alternative' column='id'/>
     */
    alternativeId: number
    /**
     * Note:
     * This is a Foreign Key to `Question.id`.<fk table='Question' column='id'/>
     */
    questionId: number
    createdAt?: string
    updatedAt?: string
  }
  Customer: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    userId: string
    name: string
    tag: string
    createdAt?: string
    updatedAt?: string
    /**
     * Note:
     * This is a Foreign Key to `Media.id`.<fk table='Media' column='id'/>
     */
    mediaId?: number
    text: string
  }
  Media: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    customerId: number
    tag: string
    name: string
    ext: string
    mime: string
    size: number
    createdAt?: string
    updatedAt?: string
    text?: string
    caption?: string
    width?: number
    height?: number
  }
  Notebook: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Note:
     * This is a Foreign Key to `Customer.id`.<fk table='Customer' column='id'/>
     */
    customerId: number
    tag: string
    /**
     * Note:
     * This is a Foreign Key to `Media.id`.<fk table='Media' column='id'/>
     */
    mediaId?: number
    text?: string
    price?: number
    name: string
    createdAt?: string
    updatedAt?: string
  }
  Question: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    tag: string
    text: string
    name: string
    createdAt?: string
    updatedAt?: string
  }
  QuestionSubTopic: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Note:
     * This is a Foreign Key to `Question.id`.<fk table='Question' column='id'/>
     */
    questionId: number
    /**
     * Note:
     * This is a Foreign Key to `SubTopic.id`.<fk table='SubTopic' column='id'/>
     */
    subTopicId: number
    createdAt?: string
    updatedAt?: string
  }
  RightAlternative: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Note:
     * This is a Foreign Key to `Alternative.id`.<fk table='Alternative' column='id'/>
     */
    alternativeId: number
    /**
     * Note:
     * This is a Foreign Key to `Question.id`.<fk table='Question' column='id'/>
     */
    questionId: number
    createdAt?: string
    updatedAt?: string
  }
  Solution: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Note:
     * This is a Foreign Key to `Question.id`.<fk table='Question' column='id'/>
     */
    questionId: number
    /**
     * Note:
     * This is a Foreign Key to `Customer.id`.<fk table='Customer' column='id'/>
     */
    customerId: number
    text: string
    createdAt?: string
    updatedAt?: string
  }
  SubTopic: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Note:
     * This is a Foreign Key to `Topic.id`.<fk table='Topic' column='id'/>
     */
    topicId: number
    name: string
    createdAt?: string
    updatedAt?: string
    order: number
  }
  Subscriber: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Note:
     * This is a Foreign Key to `Customer.id`.<fk table='Customer' column='id'/>
     */
    customerId: number
    /**
     * Note:
     * This is a Foreign Key to `Notebook.id`.<fk table='Notebook' column='id'/>
     */
    notebookId: number
    createdAt?: string
    updatedAt?: string
  }
  Topic: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Note:
     * This is a Foreign Key to `Notebook.id`.<fk table='Notebook' column='id'/>
     */
    notebookId: number
    name: string
    createdAt?: string
    updatedAt?: string
    order: number
  }
}

export interface parameters {
  /** Preference */
  preferParams: 'params=single-object'
  /** Preference */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none'
  /** Preference */
  preferCount: 'count=none'
  /** Filtering Columns */
  select: string
  /** On Conflict */
  on_conflict: string
  /** Ordering */
  order: string
  /** Limiting and Pagination */
  range: string
  /** Limiting and Pagination */
  rangeUnit: string
  /** Limiting and Pagination */
  offset: string
  /** Limiting and Pagination */
  limit: string
  /** Alternative */
  'body.Alternative': definitions['Alternative']
  'rowFilter.Alternative.id': string
  'rowFilter.Alternative.text': string
  'rowFilter.Alternative.questionId': string
  'rowFilter.Alternative.createdAt': string
  'rowFilter.Alternative.updatedAt': string
  /** ChosenAlternative */
  'body.ChosenAlternative': definitions['ChosenAlternative']
  'rowFilter.ChosenAlternative.id': string
  'rowFilter.ChosenAlternative.customerId': string
  'rowFilter.ChosenAlternative.alternativeId': string
  'rowFilter.ChosenAlternative.questionId': string
  'rowFilter.ChosenAlternative.createdAt': string
  'rowFilter.ChosenAlternative.updatedAt': string
  /** Customer */
  'body.Customer': definitions['Customer']
  'rowFilter.Customer.id': string
  'rowFilter.Customer.userId': string
  'rowFilter.Customer.name': string
  'rowFilter.Customer.tag': string
  'rowFilter.Customer.createdAt': string
  'rowFilter.Customer.updatedAt': string
  'rowFilter.Customer.mediaId': string
  'rowFilter.Customer.text': string
  /** Media */
  'body.Media': definitions['Media']
  'rowFilter.Media.id': string
  'rowFilter.Media.customerId': string
  'rowFilter.Media.tag': string
  'rowFilter.Media.name': string
  'rowFilter.Media.ext': string
  'rowFilter.Media.mime': string
  'rowFilter.Media.size': string
  'rowFilter.Media.createdAt': string
  'rowFilter.Media.updatedAt': string
  'rowFilter.Media.text': string
  'rowFilter.Media.caption': string
  'rowFilter.Media.width': string
  'rowFilter.Media.height': string
  /** Notebook */
  'body.Notebook': definitions['Notebook']
  'rowFilter.Notebook.id': string
  'rowFilter.Notebook.customerId': string
  'rowFilter.Notebook.tag': string
  'rowFilter.Notebook.mediaId': string
  'rowFilter.Notebook.text': string
  'rowFilter.Notebook.price': string
  'rowFilter.Notebook.name': string
  'rowFilter.Notebook.createdAt': string
  'rowFilter.Notebook.updatedAt': string
  /** Question */
  'body.Question': definitions['Question']
  'rowFilter.Question.id': string
  'rowFilter.Question.tag': string
  'rowFilter.Question.text': string
  'rowFilter.Question.name': string
  'rowFilter.Question.createdAt': string
  'rowFilter.Question.updatedAt': string
  /** QuestionSubTopic */
  'body.QuestionSubTopic': definitions['QuestionSubTopic']
  'rowFilter.QuestionSubTopic.id': string
  'rowFilter.QuestionSubTopic.questionId': string
  'rowFilter.QuestionSubTopic.subTopicId': string
  'rowFilter.QuestionSubTopic.createdAt': string
  'rowFilter.QuestionSubTopic.updatedAt': string
  /** RightAlternative */
  'body.RightAlternative': definitions['RightAlternative']
  'rowFilter.RightAlternative.id': string
  'rowFilter.RightAlternative.alternativeId': string
  'rowFilter.RightAlternative.questionId': string
  'rowFilter.RightAlternative.createdAt': string
  'rowFilter.RightAlternative.updatedAt': string
  /** Solution */
  'body.Solution': definitions['Solution']
  'rowFilter.Solution.id': string
  'rowFilter.Solution.questionId': string
  'rowFilter.Solution.customerId': string
  'rowFilter.Solution.text': string
  'rowFilter.Solution.createdAt': string
  'rowFilter.Solution.updatedAt': string
  /** SubTopic */
  'body.SubTopic': definitions['SubTopic']
  'rowFilter.SubTopic.id': string
  'rowFilter.SubTopic.topicId': string
  'rowFilter.SubTopic.name': string
  'rowFilter.SubTopic.createdAt': string
  'rowFilter.SubTopic.updatedAt': string
  'rowFilter.SubTopic.order': string
  /** Subscriber */
  'body.Subscriber': definitions['Subscriber']
  'rowFilter.Subscriber.id': string
  'rowFilter.Subscriber.customerId': string
  'rowFilter.Subscriber.notebookId': string
  'rowFilter.Subscriber.createdAt': string
  'rowFilter.Subscriber.updatedAt': string
  /** Topic */
  'body.Topic': definitions['Topic']
  'rowFilter.Topic.id': string
  'rowFilter.Topic.notebookId': string
  'rowFilter.Topic.name': string
  'rowFilter.Topic.createdAt': string
  'rowFilter.Topic.updatedAt': string
  'rowFilter.Topic.order': string
}
